<?php

namespace Incolab\ForumBundle\Repository;

use Incolab\DBALBundle\Manager\Manager;
use Incolab\ForumBundle\Entity\ForumRole;
use Incolab\ForumBundle\Entity\Category;

/**
 * ForumRolesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ForumRoleRepository extends Manager {
    /*
     *  id      | integer                | non NULL
     * name    | character varying(255) | non NULL
     * Index :
     * "forum_role_pkey" PRIMARY KEY, btree (id)
     * "uniq_94882abd5e237e06" UNIQUE, btree (name)
     * Référencé par :
     * TABLE "forum_category_read_roles" CONSTRAINT "fk_8e9da2e827cf6fdd" FOREIGN KEY (forum_role_id) REFERENCES forum_role(id) ON DELETE CASCADE
     * TABLE "fos_user_forum_roles" CONSTRAINT "fk_c870761127cf6fdd" FOREIGN KEY (forum_role_id) REFERENCES forum_role(id) ON DELETE CASCADE
     * TABLE "forum_category_write_roles" CONSTRAINT "fk_e8ba037227cf6fdd" FOREIGN KEY (forum_role_id) REFERENCES forum_role(id) ON DELETE CASCADE
     */

    const SQL_FINDBYNAME = "SELECT fr.id AS fr_id, fr.name AS fr_name "
            . "FROM forum_role fr "
            . "WHERE fr.name = ?";

    public static function hydrateForumRole($data = [], $key = "") {
        $forumRole = new ForumRole();
        $forumRole->setId($data[$key . "_id"])
                ->setName($data[$key . "_name"]);
        return $forumRole;
    }

    public function findByName($name) {
        $stmt = $this->dbal->prepare(self::SQL_FINDBYNAME);
        $stmt->bindValue(1, $name, \PDO::PARAM_STR);
        $stmt->execute();

        $res = $stmt->fetch();
        $stmt->closeCursor();

        if (!$res) {
            return null;
        }

        return self::hydrateForumRole($res, "fr");
    }

    public function findAll() {
        $sql = "SELECT r.id AS r_id, r.name AS r_name FROM forum_role r";
        $stmt = $this->dbal->query($sql);

        $roles = null;

        while ($res = $stmt->fetch()) {
            $roles[] = self::hydrateForumRole($res, "r");
        }
        $stmt->closeCursor();

        return $roles;
    }

    public function findReadByCategory(Category $category) {
        $sql = "SELECT crr.category_id AS crr_category_id, crr.forum_role_id AS crr_forum_role_id, "
                . "fr.id AS fr_id, fr.name AS fr_name "
                . "FROM forum_role fr "
                . "LEFT JOIN forum_category_read_roles crr ON fr.id = crr.forum_role_id "
                . "WHERE crr.category_id = ?";
        $stmt = $this->dbal->prepare($sql);
        $stmt->bindValue(1, $category->getId(), \PDO::PARAM_INT);
        $stmt->execute();

        $roles = [];

        while ($res = $stmt->fetch()) {
            $roles[] = self::hydrateForumRole($res, "fr");
        }
        $stmt->closeCursor();

        return $roles;
    }
    
    public function findWriteByCategory(Category $category) {
        $sql = "SELECT crr.category_id AS crr_category_id, crr.forum_role_id AS crr_forum_role_id, "
                . "fr.id AS fr_id, fr.name AS fr_name "
                . "FROM forum_role fr "
                . "LEFT JOIN forum_category_write_roles crr ON fr.id = crr.forum_role_id "
                . "WHERE crr.category_id = ?";
        $stmt = $this->dbal->prepare($sql);
        $stmt->bindValue(1, $category->getId(), \PDO::PARAM_INT);
        $stmt->execute();

        $roles = [];

        while ($res = $stmt->fetch()) {
            $roles[] = self::hydrateForumRole($res, "fr");
        }
        $stmt->closeCursor();

        return $roles;
    }
    
    public function persist(ForumRole $role)
    {
        if ($role->getId() !== null) {
            return $this->add($role);
        }
        
        return $this->modify($role);
    }
    
    private function add(ForumRole $role)
    {
        return $role;
    }
    private function modify(ForumRole $role)
    {
        return $role;
    }

    public function persistCategoryRoles(Category $category) {
        $beforeReadRoles = $this->findReadByCategory($category);
        foreach ($beforeReadRoles as $role) {
            if (!$category->hasReadRole($role)) {
                // on delete la jointure
                $this->deleteCategoryReadRole($category->getId(), $role->getId());
            }
        }
        foreach ($category->getReadRoles() as $role) {
            if (!$this->checkRole($beforeReadRoles, $role)) {
                // on ajoute la jointure
                $this->addCategoryReadRole($category->getId(), $role->getId());
            }
        }
        
        $beforeWriteRoles = $this->findWriteByCategory($category);
        foreach ($beforeWriteRoles as $role) {
            if (!$category->hasReadRole($role)) {
                // on delete la jointure
                $this->deleteCategoryWriteRole($category->getId(), $role->getId());
            }
        }
        foreach ($category->getReadRoles() as $role) {
            if (!$this->checkRole($beforeWriteRoles, $role)) {
                // on ajoute la jointure
                $this->addCategoryWriteRole($category->getId(), $role->getId());
            }
        }
        
    }

    private function checkRole($arrayRoles, $role) {
        foreach ($arrayRoles as $elmt) {
            if ($role == $elmt) {
                return true;
            }
        }
        return false;
    }
    
    private function deleteCategoryReadRole($category_id, $role_id)
    {
        $sql = "DELETE FROM forum_category_read_roles WHERE category_id = ? AND forum_role_id = ?";
        $stmt = $this->dbal->prepare($sql);
        $stmt->bindValue(1, $category_id, \PDO::PARAM_INT);
        $stmt->bindValue(2, $role_id, \PDO::PARAM_INT);
        $stmt->execute();
        $stmt->closeCursor();
    }
    
    private function deleteCategoryWriteRole($category_id, $role_id)
    {
        $sql = "DELETE FROM forum_category_write_roles WHERE category_id = ? AND forum_role_id = ?";
        $stmt = $this->dbal->prepare($sql);
        $stmt->bindValue(1, $category_id, \PDO::PARAM_INT);
        $stmt->bindValue(2, $role_id, \PDO::PARAM_INT);
        $stmt->execute();
        $stmt->closeCursor();
    }
    
    private function addCategoryReadRole($category_id, $role_id)
    {
        $sql = "INSERT INTO forum_category_read_roles (category_id, forum_role_id) "
                . "VALUES (?,?)";
        $stmt = $this->dbal->prepare($sql);
        $stmt->bindValue(1, $category_id, \PDO::PARAM_INT);
        $stmt->bindValue(2, $role_id, \PDO::PARAM_INT);
        $stmt->execute();
        $stmt->closeCursor();
    }
    
    private function addCategoryWriteRole($category_id, $role_id)
    {
        $sql = "INSERT INTO forum_category_write_roles (category_id, forum_role_id) "
                . "VALUES (?,?)";
        $stmt = $this->dbal->prepare($sql);
        $stmt->bindValue(1, $category_id, \PDO::PARAM_INT);
        $stmt->bindValue(2, $role_id, \PDO::PARAM_INT);
        $stmt->execute();
        $stmt->closeCursor();
    }

}
