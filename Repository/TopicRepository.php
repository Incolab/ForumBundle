<?php

namespace Incolab\ForumBundle\Repository;

use Incolab\DBALBundle\Manager\Manager;
use Incolab\ForumBundle\Entity\Category;
use Incolab\ForumBundle\Entity\Topic;
use UserBundle\Repository\UserRepository;
use Incolab\ForumBundle\Repository\CategoryRepository;

/**
 * TopicRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TopicRepository extends Manager {
    /*
     * id            | integer                        | non NULL
     * first_post_id | integer                        |
     * last_post_id  | integer                        |
     * author_id     | integer                        |
     * category_id   | integer                        |
     * subject       | character varying(255)         | non NULL
     * slug          | character varying(255)         | non NULL
     * num_views     | integer                        | non NULL
     * num_posts     | integer                        | non NULL
     * is_closed     | boolean                        | non NULL
     * is_pinned     | boolean                        | non NULL
     * is_buried     | boolean                        | non NULL
     * created_at    | timestamp(0) without time zone | non NULL
     * pulled_at     | timestamp(0) without time zone | Par défaut, NULL::timestamp without time zone
     * Index :
     * "forum_topic_pkey" PRIMARY KEY, btree (id)
     * "uniq_853478cc2d053f64" UNIQUE, btree (last_post_id)
     * "uniq_853478cc58056fd0" UNIQUE, btree (first_post_id)
     * "uniq_853478cc989d9b62" UNIQUE, btree (slug)
     * "idx_853478cc12469de2" btree (category_id)
     * "idx_853478ccf675f31b" btree (author_id)
     * Contraintes de clés étrangères :
     * "fk_853478cc12469de2" FOREIGN KEY (category_id) REFERENCES forum_category(id) ON DELETE CASCADE
     * "fk_853478cc2d053f64" FOREIGN KEY (last_post_id) REFERENCES forum_post(id) ON DELETE SET NULL
     * "fk_853478cc58056fd0" FOREIGN KEY (first_post_id) REFERENCES forum_post(id)
     * "fk_853478ccf675f31b" FOREIGN KEY (author_id) REFERENCES fos_user(id)
     * Référencé par :
     * TABLE "forum_category" CONSTRAINT "fk_21bf9426673465a3" FOREIGN KEY (last_topic_id) REFERENCES forum_topic(id) ON DELETE SET NULL
     * TABLE "forum_post" CONSTRAINT "fk_996bcc5a1f55203d" FOREIGN KEY (topic_id) REFERENCES forum_topic(id) ON DELETE CASCADE
     */

    const SQL_NBTOPICBYCAT = "SELECT COUNT(t.id) FROM forum_topic t WHERE t.category_id = ?";
    const SQL_TOPIC = "SELECT t.id AS t_id, t.subject AS t_subject, t.slug AS t_slug, "
            . "t.created_at AS t_created_at, t.is_pinned AS t_is_pinned, t.is_buried AS t_is_buried, "
            . "ta.id AS ta_id, ta.username AS ta_username, ta.avatar AS ta_avatar, "
            . "p.id AS p_id, p.topic_id AS p_topic_id, p.author_id AS p_author_id, "
            . "p.message AS p_message, p.createdat AS p_created_at, p.updatedat AS p_updatedat, "
            . "pa.id AS pa_id, pa.username AS pa_username, pa.avatar AS pa_avatar, "
            . "fp.id AS fp_id, fp.message AS fp_message, fp.createdat AS fp_created_at, fp.updatedat AS fp_updatedat, "
            . "fpa.id AS fpa_id, fpa.username AS fpa_username, fpa.avatar AS fpa_avatar, "
            . "lp.id AS lp_id, lp.message AS lp_message, lp.createdat AS lp_created_at, lp.updatedat AS lp_updatedat, "
            . "lpa.id AS lpa_id, lpa.username AS lpa_username, lpa.avatar AS lpa_avatar "
            . "FROM forum_topic t "
            . "LEFT JOIN forum_post fp ON t.first_post_id = fp.id "
            . "LEFT JOIN fos_user fpa ON fp.author_id = fpa.id "
            . "LEFT JOIN forum_post lp ON t.last_post_id = lp.id "
            . "LEFT JOIN fos_user lpa ON lp.author_id = lpa.id "
            . "LEFT JOIN forum_post p ON t.id = p.topic_id "
            . "LEFT JOIN fos_user pa ON p.author_id = pa.id "
            . "LEFT JOIN forum_category c ON t.category_id = c.id "
            . "LEFT JOIN forum_category pc ON c.parent_id = pc.id "
            . "LEFT JOIN fos_user ta ON t.author_id = ta.id "
            . "WHERE t.slug = ? AND c.slug = ? AND pc.slug = ? "
            . "%s";
    const SQL_TOPICBYCAT = "SELECT t.id AS t_id, t.subject AS t_subject, t.slug AS t_slug, "
            . "t.created_at AS t_created_at, t.is_pinned AS t_is_pinned, t.is_buried AS t_is_buried, "
            . "ta.id AS ta_id, ta.username AS ta_username, ta.avatar AS ta_avatar, "
            . "tlp.id AS tlp_id, tlp.message AS tlp_message, tlp.createdat AS tlp_created_at, "
            . "tlpa.id AS tlpa_id, tlpa.username AS tlpa_username, tlpa.avatar AS tlpa_avatar "
            . "FROM forum_topic t "
            . "LEFT JOIN forum_category c ON t.category_id = c.id "
            . "LEFT JOIN fos_user ta ON t.author_id = ta.id "
            . "LEFT JOIN forum_post tlp ON t.last_post_id = tlp.id "
            . "LEFT JOIN fos_user tlpa ON tlp.author_id = tlpa.id "
            . "WHERE c.id = ? AND (t.is_buried IS NULL OR t.is_buried = false) "
            . "ORDER BY t.is_pinned DESC, CASE WHEN tlp.id IS NULL THEN t.created_at ELSE tlp.createdat END DESC "
            . "LIMIT ? OFFSET ?";
    const SQL_INSERT = "INSERT into forum_topic ("
            . "id, subject, category_id, first_post_id, last_post_id, author_id, slug, num_views, num_posts, "
            . "created_at, pulled_at, is_closed, is_pinned, is_buried"
            . ") "
            . "VALUES (nextval('forum_topic_id_seq'),?,?,?,?,?,?,?,?,?,?,?,?,?)";
    const SQL_UPDATE = "UPDATE forum_topic SET subject = ?, category_id = ?, first_post_id = ?, last_post_id = ?, "
            . "author_id = ?, slug = ?, num_views = ?, num_posts = ?, created_at = ?, pulled_at = ?, "
            . "is_closed = ?, is_pinned = ?, is_buried = ? "
            . "WHERE id = ?";

    public static $strGetTopicQuery = "SELECT t, f, r, crr, cwr, c, p, fa, ra "
            . "FROM IncolabForumBundle:Topic t LEFT JOIN t.firstPost f "
            . "LEFT JOIN t.replies r LEFT JOIN t.category c LEFT JOIN c.parent p "
            . "LEFT JOIN f.author fa LEFT JOIN r.author ra "
            . "INNER JOIN c.readRoles crr INNER JOIN c.writeRoles cwr "
            . "WHERE t.slug = :slugTopic AND c.slug = :slugCat AND p.slug = :slugParentCat "
            . "ORDER BY r.createdAt ASC";

    public static function hydrateTopic($data = [], $key = "") {
        $topic = new Topic();
        $topic->setId($data[$key . "_id"])
                ->setSubject($data[$key . "_subject"])
                ->setSlug($data[$key . "_slug"])
                ->setCreatedAt(\DateTime::createFromFormat("Y-m-d H:i:s", $data[$key . "_created_at"]));

        return $topic;
    }

    public function getTopic($slugTopic, $slugCat, $slugParentCat, $page = 1, $maxResults = 10) {
        $sql = sprintf(self::SQL_TOPIC, "LIMIT ? OFFSET ?");
        $stmt = $this->dbal->prepare($sql);
        $stmt->bindValue(1, $slugTopic, \PDO::PARAM_STR);
        $stmt->bindValue(2, $slugCat, \PDO::PARAM_STR);
        $stmt->bindValue(3, $slugParentCat, \PDO::PARAM_STR);
        $stmt->bindValue(4, $maxResults, \PDO::PARAM_INT);
        $offset = $maxResults * ($page - 1);
        $stmt->bindValue(5, $offset, \PDO::PARAM_INT);

        $stmt->execute();

        $topic = null;
        while ($res = $stmt->fetch()) {
            if ($topic === null) {
                $topic = self::hydrateTopic($res, "t");
                $topic->setAuthor(UserRepository::lightHydrateUser($res, "ta"));
                $firstPost = PostRepository::hydratePost($res, "fp");
                $firstPost->setAuthor(UserRepository::lightHydrateUser($res, "fpa"));
                $topic->setFirstPost($firstPost);
                $lastPost = PostRepository::hydratePost($res, "lp");
                $lastPost->setAuthor(UserRepository::lightHydrateUser($res, "lpa"));
                $topic->setLAstPost($lastPost);
            }

            if (isset($res["p_id"])) {
                $post = PostRepository::hydratePost($res, "p");
                $post->setAuthor(UserRepository::lightHydrateUser($res, "pa"));
                $topic->addReply($post);
            }
        }
        $stmt->closeCursor();

        if ($topic === null) {
            return $topic;
        }

        $categoryRepository = new CategoryRepository($this->dbal);
        $topic->setCategory($categoryRepository->getCategory($slugCat, $slugParentCat, false));
        return $topic;
    }

    public function getTopicsByCat(Category $category, $page = 1, $maxResults = 10) {
        $stmt = $this->dbal->prepare(self::SQL_TOPICBYCAT);
        $stmt->bindValue(1, $category->getId(), \PDO::PARAM_INT);
        $stmt->bindValue(2, $maxResults, \PDO::PARAM_INT);
        $stmt->bindValue(3, ceil(($page - 1) * $maxResults), \PDO::PARAM_INT);
        $stmt->execute();

        $topics = [];
        while ($res = $stmt->fetch()) {
            $topic = TopicRepository::hydrateTopic($res, "t");
            $topic->setAuthor(UserRepository::lighthydrateUser($res, "ta"));
            if (isset($res["tlp_id"])) {
                $lastPost = PostRepository::hydratePost($res, "tlp");
                $lastPost->setAuthor(UserRepository::lighthydrateUser($res, "tlpa"));
                $topic->setLastPost($lastPost);
            }
            $topics[] = $topic;
        }
        $stmt->closeCursor();

        return $topics;
    }

    public function getTopicBySlugTopicCatParentCat($slugTopic, $slugCat, $slugParentCat) {
        $query = $this->_em->createQuery(self::$strGetTopicQuery)
                ->setParameters(
                array(
                    ':slugTopic' => $slugTopic,
                    ':slugCat' => $slugCat,
                    ':slugParentCat' => $slugParentCat
                )
        );

        return $query->getOneOrNullResult();
    }

    public function getNbTopicByCat(Category $category) {
        $stmt = $this->dbal->prepare(self::SQL_NBTOPICBYCAT);
        $stmt->bindValue(1, $category->getId(), \PDO::PARAM_INT);
        $stmt->execute();
        $res = $stmt->fetch();
        $stmt->closeCursor();

        return (int) $res["count"];
    }

    public function persist(Topic $topic) {
        if ($topic->getId() === null) {
            return $this->insert($topic);
        }
        return $this->update($topic);
    }

    private function insert(Topic $topic) {
        $stmt = $this->dbal->prepare(self::SQL_INSERT);
        $stmt->bindValue(1, $topic->getSubject(), \PDO::PARAM_STR);
        $stmt->bindValue(2, $topic->getCategory()->getId(), \PDO::PARAM_INT);
        $stmt->bindValue(3, $topic->getFirstPost()->getId(), \PDO::PARAM_INT);
        $lastpostId = null;
        if ($topic->getLastPost()) {
            $lastpostId = $topic->getLastPost()->getId();
        }
        $stmt->bindValue(4, $lastpostId, \PDO::PARAM_INT);
        $stmt->bindValue(5, $topic->getAuthor()->getId(), \PDO::PARAM_INT);
        $stmt->bindValue(6, $topic->getSlug(), \PDO::PARAM_STR);
        $stmt->bindValue(7, $topic->getNumViews(), \PDO::PARAM_INT);
        $stmt->bindValue(8, $topic->getNumPosts(), \PDO::PARAM_INT);
        $stmt->bindValue(9, $topic->getCreatedAt()->format("Y-m-d H:i:s"), \PDO::PARAM_STR);
        $pulledat = null;
        if ($topic->getPulledAt()) {
            $pulledat = $topic->getPulledAt()->format("Y-m-d H:i:s");
        }
        $stmt->bindValue(10, $pulledat, \PDO::PARAM_STR);
        $stmt->bindValue(11, $topic->isClosed(), \PDO::PARAM_BOOL);
        $stmt->bindValue(12, $topic->isPinned(), \PDO::PARAM_BOOL);
        $stmt->bindValue(13, $topic->isBuried(), \PDO::PARAM_BOOL);
        $stmt->execute();

        $stmt->closeCursor();

        $topic->setId($this->dbal->lastInsertId("forum_topic_id_seq"));

        return $topic;
    }

    private function update(Topic $topic) {
        $stmt = $this->dbal->prepare(self::SQL_UPDATE);
        $stmt->bindValue(1, $topic->getSubject(), \PDO::PARAM_STR);
        $stmt->bindValue(2, $topic->getCategory()->getId(), \PDO::PARAM_INT);
        $stmt->bindValue(3, $topic->getFirstPost()->getId(), \PDO::PARAM_INT);
        $lastpostId = null;
        if ($topic->getLastPost()) {
            $lastpostId = $topic->getLastPost()->getId();
        }
        $stmt->bindValue(4, $lastpostId, \PDO::PARAM_INT);
        $stmt->bindValue(5, $topic->getAuthor()->getId(), \PDO::PARAM_INT);
        $stmt->bindValue(6, $topic->getSlug(), \PDO::PARAM_STR);
        $stmt->bindValue(7, $topic->getNumViews(), \PDO::PARAM_INT);
        $stmt->bindValue(8, $topic->getNumPosts(), \PDO::PARAM_INT);
        $stmt->bindValue(9, $topic->getCreatedAt()->format("Y-m-d H:i:s"), \PDO::PARAM_STR);
        $pulledat = null;
        if ($topic->getPulledAt()) {
            $pulledat = $topic->getPulledAt()->format("Y-m-d H:i:s");
        }
        $stmt->bindValue(10, $pulledat, \PDO::PARAM_STR);
        $stmt->bindValue(11, $topic->isClosed(), \PDO::PARAM_BOOL);
        $stmt->bindValue(12, $topic->isPinned(), \PDO::PARAM_BOOL);
        $stmt->bindValue(13, $topic->isBuried(), \PDO::PARAM_BOOL);
        $stmt->bindValue(14, $topic->getId(), \PDO::PARAM_INT);
        $stmt->execute();

        $stmt->closeCursor();

        return $topic;
    }

    public function remove(Topic $topic) {
        $sql = "DELETE FROM forum_topic WHERE id = ?";
        $stmt = $this->dbal->prepare($sql);
        $stmt->bindValue(1, $topic->getId(), \PDO::PARAM_INT);
        $stmt->execute();
        $stmt->closeCursor();
    }

}
