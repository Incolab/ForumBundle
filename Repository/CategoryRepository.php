<?php

namespace Incolab\ForumBundle\Repository;

use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * CategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryRepository extends \Doctrine\ORM\EntityRepository
{
    public static $strIndexQuery = "SELECT c, ch, crr, "
            . "partial t.{id, author, subject, slug, createdAt}, "
            . "partial p.{id, topic, author, createdAt}, "
            . "partial a.{id, username}, partial pa.{id, username}, "
            . "partial pt.{id, subject, slug} "
            . "FROM IncolabForumBundle:Category c LEFT JOIN c.readRoles crr "
            . "LEFT JOIN c.childs ch LEFT JOIN ch.readRoles chrr "
            . "LEFT JOIN ch.lastTopic t LEFT JOIN t.author a "
            . "LEFT JOIN ch.lastPost p LEFT JOIN p.topic pt LEFT JOIN p.author pa "
            . "WHERE c.parent IS NULL ";
    
    public static $strParentCatQuery = "SELECT c, ch, "
            . "partial t.{id, author, subject, category, slug, createdAt}, "
            . "partial p.{id, topic, author, createdAt}, "
            . "partial ta.{id, username}, partial pa.{id, username}, "
            . "partial pt.{id, subject, slug} "
            . "FROM IncolabForumBundle:Category c LEFT JOIN c.readRoles crr "
            . "LEFT JOIN c.childs ch LEFT JOIN ch.readRoles chrr "
            . "LEFT JOIN ch.lastTopic t LEFT JOIN t.author ta "
            . "LEFT JOIN ch.lastPost p LEFT JOIN p.topic pt LEFT JOIN p.author pa "
            . "WHERE c.slug = :slug AND c.parent IS NULL ";
    
    public static $strParentsWithChilds = "SELECT c, ch "
            . "FROM IncolabForumBundle:Category c "
            . "LEFT JOIN c.childs ch "
            . "WHERE c.parent IS NULL "
            . "ORDER BY c.position ASC, ch.position ASC";

    public function getIndex($roles = array())
    {
        $parameters = array();
        $parentwhere= "AND (";
        $childwhere = "AND (";
        
        foreach ($roles as $key => $roles) {
            if ($key > 0) {
                $parentwhere = $parentwhere." OR ";
                $childwhere = $childwhere." OR ";
            }
            $parentwhere = $parentwhere."crr = :cread".$key;
            $childwhere = $childwhere."chrr = :chread".$key;
            $parameters["cread".$key] = $roles;
            $parameters["chread".$key] = $roles;
        }
            
        $parentwhere = $parentwhere.") ";
        $childwhere = $childwhere.") ";
            
        $strQuery = self::$strIndexQuery.$parentwhere.$childwhere;
            
        $strQuery = $strQuery . "ORDER BY c.position ASC, ch.position ASC";
        $query = $this->_em->createQuery($strQuery)->setParameters($parameters);
            
        return $query->getResult();
    }
    
    public function getParents()
    {
        $categories = $this->createQueryBuilder('p')
            ->where('p.parent IS NULL')
            ->orderBy('p.position', 'ASC')
            ->getQuery()->getResult();
        
        return $categories;
    }
    
    public function getParentsWithChilds()
    {
        $query = $this->_em->createQuery(self::$strParentsWithChilds);
        return $query->getResult();
    }
    
    public function getParentBySlug($slug)
    {
        $parentCat = $this->createQueryBuilder('c')
                ->where('c.slug = :slug AND c.parent IS NULL')
                ->setParameter(':slug', $slug)
                ->getQuery()->setMaxResults(1)->getOneOrNullResult();
        return $parentCat;
    }
    
    // A changer pour le paginator
    public function getParentCategoryPageBySlug($slug, $page = 1, $maxperpage = 10)
    {
        $parentCategory = $this->createQueryBuilder('p')
            ->leftJoin('p.childs', 'c')
            ->leftJoin('c.lastTopic', 'l')
            ->leftJoin('c.lastPost', 'm')
            ->leftJoin('l.author', 'a')
            ->leftJoin('m.author', 'b')
            ->addSelect('c')
            ->addSelect('partial l.{id, author, subject, category, slug, createdAt}')
            ->addSelect('partial m.{id, topic, author, createdAt}')
            ->addSelect('partial a.{id, username}')
            ->addSelect('partial b.{id, username}')
            ->where('p.slug = :slug AND p.parent IS NULL')
            ->setParameter(':slug', $slug)
            //->getQuery()->getOneOrNullResult()
            ->setFirstResult(($page -1) * $maxperpage)
            ->setMaxResults($maxperpage)
            ;
            
        return new Paginator($parentCategory);
    }
    
    public function getParentCategoryBySlug($readRoles, $slug)
    {
        $parameters = array('slug' => $slug);
        
        $parentwhere= "AND (";
        $childwhere = "AND (";
        
        foreach ($readRoles as $key => $roles) {
            if ($key > 0) {
                $parentwhere = $parentwhere." OR ";
                $childwhere = $childwhere." OR ";
            }
            $parentwhere = $parentwhere."crr = :cread".$key;
            $childwhere = $childwhere."chrr = :chread".$key;
            $parameters["cread".$key] = $roles;
            $parameters["chread".$key] = $roles;
        }
            
        $parentwhere = $parentwhere.") ";
        $childwhere = $childwhere.") ";
            
        $strQuery = self::$strParentCatQuery.$parentwhere.$childwhere;
            
        $strQuery = $strQuery . "ORDER BY c.position ASC, ch.position ASC";
        $query = $this->_em->createQuery($strQuery)->setParameters($parameters);
            
        return $query->getOneOrNullResult();
    }
    
    public function getCategoryBySlugAndParentSlug($slug, $parentSlug)
    {
        $category = $this->createQueryBuilder('c')
                ->leftJoin('c.parent', 'p')
                ->addSelect('p')
                ->where('c.slug = :slugCat AND p.slug = :slugParent')
                ->setParameters(array(':slugCat' => $slug, ':slugParent' => $parentSlug ))
                ->getQuery()->getOneOrNullResult();
        return $category;
    }
    
    public function getPartialCategoryBySlugAndParentSlug($slug, $parentSlug)
    {
        $parameters = array(':slugCat' => $slug, ':slugParent' => $parentSlug );
        
        $category = $this->createQueryBuilder('c')
                ->leftJoin('c.parent', 'p')
                ->leftJoin('c.topics', 't')
                ->leftJoin('t.author', 'ta')
                ->leftJoin('t.lastPost', 'l')
                ->leftJoin('l.author', 'la')
                ->addSelect('p')
                ->addSelect('t')
                ->addSelect('partial ta.{id, username}')
                ->addSelect('l')
                ->addSelect('partial la.{id, username}')
                ->where('c.slug = :slugCat AND p.slug = :slugParent')
                ->setParameters($parameters)
                ->getQuery()->getOneOrNullResult();
        return $category;
    }
    
    // A changer pour le paginator
    public function getCategoryPageBySlugAndParentSlug($slug, $parentSlug)
    {
        $category = $this->createQueryBuilder('c')
                ->leftJoin('c.parent', 'p')
                ->leftJoin('c.topics', 't')
                ->leftJoin('t.author', 'ta')
                ->leftJoin('t.lastPost', 'l')
                ->leftJoin('l.author', 'la')
                ->addSelect('p')
                ->addSelect('distinct t')
                ->addSelect('partial ta.{id, username}')
                ->addSelect('l')
                ->addSelect('partial la.{id, username}')
                ->where('c.slug = :slugCat AND p.slug = :slugParent')
                ->setParameters(array(':slugCat' => $slug, ':slugParent' => $parentSlug ))
                ->getQuery()->getOneOrNullResult();
        return $category;
    }
    
    public function getCategoryForInsertTopic($slug, $parentSlug)
    {
        $category = $this->createQueryBuilder('p')
                ->where('p.slug = :parentSlug AND p.parent IS NULL')
                ->addSelect('childs')
                ->andWhere('childs.slug = :childSlug')
                ->leftJoin('p.childs', 'childs')
                ->setParameters(array(':parentSlug' => $parentSlug, ':childSlug' => $slug))
                ->getQuery()->getOneOrNullResult();
        return $category;
    }
}
