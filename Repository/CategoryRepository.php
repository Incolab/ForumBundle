<?php

namespace Incolab\ForumBundle\Repository;

/**
 * CategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryRepository extends \Doctrine\ORM\EntityRepository {

    public static $strIndexQuery = "SELECT c, ch, crr, "
            . "partial t.{id, author, subject, slug, createdAt}, "
            . "partial p.{id, topic, author, createdAt}, "
            . "a, pa, "
            . "partial pt.{id, subject, slug} "
            . "FROM IncolabForumBundle:Category c LEFT JOIN c.readRoles crr "
            . "LEFT JOIN c.childs ch LEFT JOIN ch.readRoles chrr "
            . "LEFT JOIN ch.lastTopic t LEFT JOIN t.author a "
            . "LEFT JOIN ch.lastPost p LEFT JOIN p.topic pt LEFT JOIN p.author pa "
            . "WHERE c.parent IS NULL AND crr IN (:readRole) OR chrr IN (:chreadRole) "
            . "ORDER BY c.position ASC, ch.position ASC";
    
    public static $strParentCatQuery = "SELECT c, ch, "
            . "partial t.{id, author, subject, category, slug, createdAt}, "
            . "partial p.{id, topic, author, createdAt}, "
            . "ta, pa, "
            . "partial pt.{id, subject, slug} "
            . "FROM IncolabForumBundle:Category c LEFT JOIN c.readRoles crr "
            . "LEFT JOIN c.childs ch LEFT JOIN ch.readRoles chrr "
            . "LEFT JOIN ch.lastTopic t LEFT JOIN t.author ta "
            . "LEFT JOIN ch.lastPost p LEFT JOIN p.topic pt LEFT JOIN p.author pa "
            . "WHERE c.slug = :slug AND c.parent IS NULL "
            . "AND (crr IN (:readRole) OR chrr IN (:chreadRole)) "
            . "ORDER BY c.position ASC, ch.position ASC";
    
    public static $strParentsWithChilds = "SELECT c, ch "
            . "FROM IncolabForumBundle:Category c "
            . "LEFT JOIN c.childs ch "
            . "WHERE c.parent IS NULL "
            . "ORDER BY c.position ASC, ch.position ASC";
    
    public static $strGetCategoryBySlugAndParentSlug = "SELECT c, p, t, lp, lpa, crr, cwr, "
            . "(CASE WHEN lp.id IS NULL THEN 0 ELSE 1 END) AS HIDDEN ordlp "
            . "FROM IncolabForumBundle:Category c LEFT JOIN c.parent p "
            . "LEFT JOIN c.topics t LEFT JOIN t.lastPost lp LEFT JOIN lp.author lpa "
            . "INNER JOIN c.readRoles crr INNER JOIN c.writeRoles cwr "
            . "WHERE c.slug = :cslug AND p.slug = :pslug AND t.isBuried = false "
            . "ORDER BY t.isPinned DESC, ordlp DESC, lp.id DESC";
    
    public static $strGetCategoryForInsertTopic = "SELECT p, ch "
            . "FROM IncolabForumBundle:Category p LEFT JOIN p.childs ch "
            . "WHERE p.slug = :parentSlug AND p.parent IS NULL AND ch.slug = :childSlug";
    
    public function getIndex($roles = array()) {
        $query = $this->_em->createQuery(self::$strIndexQuery)->setParameters([":readRole" => $roles, ":chreadRole" => $roles]);
        return $query->getResult();
    }

    public function getParents() {
        $categories = $this->createQueryBuilder('p')
                        ->where('p.parent IS NULL')
                        ->orderBy('p.position', 'ASC')
                        ->getQuery()->getResult();

        return $categories;
    }

    public function getParentsWithChilds() {
        $query = $this->_em->createQuery(self::$strParentsWithChilds);
        return $query->getResult();
    }

    public function getParentBySlug($slug) {
        $parentCat = $this->createQueryBuilder('c')
                        ->where('c.slug = :slug AND c.parent IS NULL')
                        ->setParameter(':slug', $slug)
                        ->getQuery()->setMaxResults(1)->getOneOrNullResult();
        return $parentCat;
    }

    public function getParentCategoryBySlug($readRoles, $slug) {
        $parameters = [
                    ":slug" => $slug,
                    ":readRole" => $readRoles,
                    ":chreadRole" => $readRoles
        ];
        
        $query = $this->_em->createQuery(self::$strParentCatQuery)->setParameters($parameters);

        return $query->getOneOrNullResult();
    }

    public function getCategory($slug, $parentSlug, $page = 1, $maxResults = 10) {
        $params = [
            'cslug' => $slug,
            'pslug' => $parentSlug
        ];
        
        $query = $this->_em->createQuery(self::$strGetCategoryBySlugAndParentSlug)
                ->setParameters($params);
        
        $query->setFirstResult(($page - 1) * $maxResults)
                ->setMaxResults($maxResults);
        
        return $query->getOneOrNullResult();
    }
    
    public function getCategoryBySlugAndParentSlug($slug, $parentSlug) {
        $params = [
            'cslug' => $slug,
            'pslug' => $parentSlug
        ];
        
        $query = $this->_em->createQuery(self::$strGetCategoryBySlugAndParentSlug)
                ->setParameters($params);
        
        return $query->getOneOrNullResult();
    }

    public function getCategoryForInsertTopic($slug, $parentSlug) {
        $query = $this->_em->createQuery(static::$strGetCategoryForInsertTopic)
                ->setParameters([':parentSlug' => $parentSlug, ':childSlug' => $slug]);
        return $query->getOneOrNullResult();
    }

}
