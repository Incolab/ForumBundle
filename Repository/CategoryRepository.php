<?php

namespace Incolab\ForumBundle\Repository;

use Incolab\DBALBundle\Manager\Manager;
use Incolab\ForumBundle\Entity\Category;
use Incolab\ForumBundle\Repository\TopicRepository;
use Incolab\ForumBundle\Repository\PostRepository;
use UserBundle\Repository\UserRepository;

/**
 * CategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryRepository extends Manager {
    /*
     * id            | integer                | non NULL                                                                                                                                                                                                                             
     * parent_id     | integer                |
     * last_topic_id | integer                |
     * last_post_id  | integer                |
     * name          | character varying(255) | non NULL
     * description   | text                   | non NULL
     * slug          | character varying(255) | non NULL
     * position      | integer                | non NULL
     * num_topics    | integer                | non NULL
     * num_posts     | integer                | non NULL
     * Index :
     * "forum_category_pkey" PRIMARY KEY, btree (id)
     * "uniq_21bf9426989d9b62" UNIQUE, btree (slug)
     * "idx_21bf94262d053f64" btree (last_post_id)
     * "idx_21bf9426673465a3" btree (last_topic_id)
     * "idx_21bf9426727aca70" btree (parent_id)
     * Contraintes de clés étrangères :
     * "fk_21bf94262d053f64" FOREIGN KEY (last_post_id) REFERENCES forum_post(id) ON DELETE SET NULL
     * "fk_21bf9426673465a3" FOREIGN KEY (last_topic_id) REFERENCES forum_topic(id) ON DELETE SET NULL
     * "fk_21bf9426727aca70" FOREIGN KEY (parent_id) REFERENCES forum_category(id) ON DELETE CASCADE
     * Référencé par :
     * TABLE "forum_category" CONSTRAINT "fk_21bf9426727aca70" FOREIGN KEY (parent_id) REFERENCES forum_category(id) ON DELETE CASCADE
     * TABLE "forum_topic" CONSTRAINT "fk_853478cc12469de2" FOREIGN KEY (category_id) REFERENCES forum_category(id) ON DELETE CASCADE
     * TABLE "forum_category_read_roles" CONSTRAINT "fk_8e9da2e812469de2" FOREIGN KEY (category_id) REFERENCES forum_category(id) ON DELETE CASCADE
     * TABLE "forum_category_write_roles" CONSTRAINT "fk_e8ba037212469de2" FOREIGN KEY (category_id) REFERENCES forum_category(id) ON DELETE CASCADE
     */

    const SQL_INDEX = "SELECT c.id AS c_id, c.parent_id AS c_parent_id, c.last_topic_id AS c_last_topic_id, c.last_post_id AS c_last_post_id, "
            . "c.name AS c_name, c.description AS c_description, c.slug AS c_slug, c.position AS c_position, c.num_topics AS c_num_topics, "
            . "c.num_posts AS c_num_posts, "
            . "ch.id AS ch_id, ch.parent_id AS ch_parent_id, ch.last_topic_id AS ch_last_topic_id, ch.last_post_id AS ch_last_post_id, ch.name AS ch_name, "
            . "ch.description AS ch_description, ch.slug AS ch_slug, ch.position AS ch_position, ch.num_topics AS ch_num_topics, ch.num_posts AS ch_num_posts, "
            . "lt.id AS lt_id, lt.subject AS lt_subject, lt.slug AS lt_slug, lt.created_at AS lt_created_at, lt.author_id AS lt_author_id, "
            . "alt.id AS alt_id, alt.username AS alt_username, "
            . "lp.id AS lp_id, lp.message AS lp_message, lp.createdat AS lp_created_at, lp.author_id AS lp_author_id, "
            . "alp.id AS alp_id, alp.username AS alp_username, "
            . "lpt.id AS lpt_id, lpt.subject AS lpt_subject, lpt.slug AS lpt_slug, lpt.created_at AS lpt_created_at "
            . "FROM forum_category c "
            . "LEFT JOIN forum_category_read_roles crr ON c.id = crr.category_id LEFT JOIN forum_role fr ON fr.id = crr.forum_role_id "
            . "LEFT JOIN forum_category ch ON c.id = ch.parent_id "
            . "LEFT JOIN forum_category_read_roles chrr ON ch.id = chrr.category_id LEFT JOIN forum_role chfr ON chfr.id = chrr.forum_role_id "
            . "LEFT JOIN forum_topic lt ON ch.last_topic_id = lt.id LEFT JOIN user_account alt ON lt.author_id = alt.id "
            . "LEFT JOIN forum_post lp ON ch.last_post_id = lp.id LEFT JOIN forum_topic lpt ON lp.topic_id = lpt.id "
            . "LEFT JOIN user_account alp ON lp.author_id = alp.id "
            . "WHERE c.parent_id IS NULL AND fr.id IN (?) OR chfr.id IN (?) "
            . "ORDER BY c.position ASC, ch.position ASC";
    const SQL_CHILDSBYCAT = "ch.id AS ch_id, ch.parent_id AS ch_parent_id, ch.last_topic_id AS ch_last_topic_id, "
            . "ch.last_post_id AS ch_last_post_id, ch.name AS ch_name, ch.description AS ch_description, ch.slug AS ch_slug, "
            . "ch.position AS ch_position, ch.num_topics AS ch_num_topics, ch.num_posts AS ch_num_posts, "
            . "chlt.id AS chlt_id, chlt.subject AS chlt_subject, chlt.slug AS chlt_slug, chlt.created_at AS chlt_created_at, "
            . "chlt.is_pinned AS chlt_is_pinned, chlt.is_buried AS chlt_is_buried, "
            . "chlp.id AS chlp_id, chlp.topic_id AS chlp_topic_id, chlp.author_id AS chlp_author_id, chlp.message AS chlp_message, "
            . "chlp.createdat AS chlp_created_at, chlp.updatedat AS chlp_updated_at, "
            . "chrr.id AS chrr_id, chrr.name AS chrr_name, "
            . "chwr.id AS chwr_id, chwr.name AS chwr_name "
            . "from forum_category ch "
            . "LEFT JOIN forum_topic chlt ON ch.last_topic_id = chlt.id LEFT JOIN forum_post chlp ON ch.last_post_id = chlp.id "
            . "LEFT JOIN forum_category_read_roles fchrr ON ch.id = fchrr.category_id LEFT JOIN forum_role chrr ON chrr.id = fchrr.forum_role_id "
            . "LEFT JOIN forum_category_write_roles fchwr ON ch.id = fchwr.category_id LEFT JOIN forum_role chwr ON chwr.id = fchwr.forum_role_id "
            . "WHERE ch.parent_id = ?";
    const SQL_PARENTBYSLUG = "SELECT c.id AS c_id, c.parent_id AS c_parent_id, c.last_topic_id AS c_last_topic_id, "
            . "c.last_post_id AS c_last_post_id, c.name AS c_name, c.description AS c_description, c.slug AS c_slug, "
            . "c.position AS c_position, c.num_topics AS c_num_topics, c.num_posts AS c_num_posts, "
            . "ch.id AS ch_id, ch.parent_id AS ch_parent_id, ch.last_topic_id AS ch_last_topic_id, ch.last_post_id AS ch_last_post_id, ch.name AS ch_name, "
            . "ch.description AS ch_description, ch.slug AS ch_slug, ch.position AS ch_position, ch.num_topics AS ch_num_topics, ch.num_posts AS ch_num_posts, "
            . "lt.id AS lt_id, lt.subject AS lt_subject, lt.slug AS lt_slug, lt.created_at AS lt_created_at, lt.author_id AS lt_author_id, "
            . "alt.id AS alt_id, alt.username AS alt_username, "
            . "lp.id AS lp_id, lp.message AS lp_message, lp.createdat AS lp_created_at, lp.author_id AS lp_author_id, "
            . "alp.id AS alp_id, alp.username AS alp_username, "
            . "lpt.id AS lpt_id, lpt.subject AS lpt_subject, lpt.slug AS lpt_slug, lpt.created_at AS lpt_created_at "
            . "FROM forum_category c "
            . "LEFT JOIN forum_category_read_roles crr ON c.id = crr.category_id LEFT JOIN forum_role fr ON fr.id = crr.forum_role_id "
            . "LEFT JOIN forum_category ch ON c.id = ch.parent_id "
            . "LEFT JOIN forum_category_read_roles chrr ON ch.id = chrr.category_id LEFT JOIN forum_role chfr ON chfr.id = chrr.forum_role_id "
            . "LEFT JOIN forum_topic lt ON ch.last_topic_id = lt.id LEFT JOIN user_account alt ON lt.author_id = alt.id "
            . "LEFT JOIN forum_post lp ON ch.last_post_id = lp.id LEFT JOIN forum_topic lpt ON lp.topic_id = lpt.id "
            . "LEFT JOIN user_account alp ON lp.author_id = alp.id "
            . "WHERE c.slug = ? AND c.parent_id IS NULL %s"
            . "ORDER BY ch.position ASC";
    const SQL_CATEGORYBYSLUG = "SELECT c.id AS c_id, c.parent_id AS c_parent_id, c.last_topic_id AS c_last_topic_id, "
            . "c.last_post_id AS c_last_post_id, c.name AS c_name, c.description AS c_description, c.slug AS c_slug, "
            . "c.position AS c_position, c.num_topics AS c_num_topics, c.num_posts AS c_num_posts, "
            . "clt.id AS clt_id, clt.subject AS clt_subject, clt.slug AS clt_slug, clt.created_at AS clt_created_at, "
            . "clt.is_pinned AS clt_is_pinned, clt.is_buried AS clt_is_buried, "
            . "clp.id AS clp_id, clp.topic_id AS clp_topic_id, clp.author_id AS clp_author_id, clp.message AS clp_message, "
            . "clp.createdat AS clp_created_at, clp.updatedat AS clp_updated_at, "
            . "crr.id AS crr_id, crr.name AS crr_name, "
            . "cwr.id AS cwr_id, cwr.name AS cwr_name, "
            . "p.id AS p_id, p.parent_id AS p_parent_id, p.last_topic_id AS p_last_topic_id, p.last_post_id AS p_last_post_id, p.name AS p_name, "
            . "p.description AS p_description, p.slug AS p_slug, p.position AS p_position, p.num_topics AS p_num_topics, p.num_posts AS p_num_posts, "
            . "plt.id AS plt_id, plt.subject AS plt_subject, plt.slug AS plt_slug, plt.created_at AS plt_created_at, "
            . "plt.is_pinned AS plt_is_pinned, plt.is_buried AS plt_is_buried, "
            . "plp.id AS plp_id, plp.topic_id AS plp_topic_id, plp.author_id AS plp_author_id, plp.message AS plp_message, "
            . "plp.createdat AS plp_created_at, plp.updatedat AS plp_updated_at, "
            . "prr.id AS prr_id, prr.name AS prr_name, "
            . "pwr.id AS pwr_id, pwr.name AS pwr_name "
            . "FROM forum_category c "
            . "LEFT JOIN forum_topic clt ON c.last_topic_id = clt.id LEFT JOIN forum_post clp ON c.last_post_id = clp.id "
            . "LEFT JOIN forum_category_read_roles fcrr ON c.id = fcrr.category_id LEFT JOIN forum_role crr ON crr.id = fcrr.forum_role_id "
            . "LEFT JOIN forum_category_write_roles fcwr ON c.id = fcwr.category_id LEFT JOIN forum_role cwr ON cwr.id = fcwr.forum_role_id "
            . "LEFT JOIN forum_category p ON c.parent_id = p.id "
            . "LEFT JOIN forum_topic plt ON p.last_topic_id = plt.id LEFT JOIN forum_post plp ON p.last_post_id = plp.id "
            . "LEFT JOIN forum_category_read_roles fprr ON p.id = fprr.category_id LEFT JOIN forum_role prr ON prr.id = fprr.forum_role_id "
            . "LEFT JOIN forum_category_write_roles fpwr ON p.id = fpwr.category_id LEFT JOIN forum_role pwr ON pwr.id = fpwr.forum_role_id "
            . "WHERE c.slug = ? AND p.slug = ?";
    const SQL_PARENTSWITHCHILDS = "SELECT p.id AS p_id, p.parent_id AS p_parent_id, p.last_topic_id AS p_last_topic_id, p.last_post_id AS p_last_post_id, p.name AS p_name, "
            . "p.description AS p_description, p.slug AS p_slug, p.position AS p_position, p.num_topics AS p_num_topics, p.num_posts AS p_num_posts, "
            . "plt.id AS plt_id, plt.subject AS plt_subject, plt.slug AS plt_slug, plt.created_at AS plt_created_at, "
            . "plt.is_pinned AS plt_is_pinned, plt.is_buried AS plt_is_buried, "
            . "plp.id AS plp_id, plp.topic_id AS plp_topic_id, plp.author_id AS plp_author_id, plp.message AS plp_message, "
            . "plp.createdat AS plp_created_at, plp.updatedat AS plp_updated_at ,"
            . "ch.id AS ch_id, ch.parent_id AS ch_parent_id, ch.last_topic_id AS ch_last_topic_id, "
            . "ch.last_post_id AS ch_last_post_id, ch.name AS ch_name, ch.description AS ch_description, ch.slug AS ch_slug, "
            . "ch.position AS ch_position, ch.num_topics AS ch_num_topics, ch.num_posts AS ch_num_posts, "
            . "chlt.id AS chlt_id, chlt.subject AS chlt_subject, chlt.slug AS chlt_slug, chlt.created_at AS chlt_created_at, "
            . "chlt.is_pinned AS chlt_is_pinned, chlt.is_buried AS chlt_is_buried, "
            . "chlp.id AS chlp_id, chlp.topic_id AS chlp_topic_id, chlp.author_id AS chlp_author_id, chlp.message AS chlp_message, "
            . "chlp.createdat AS chlp_created_at, chlp.updatedat AS chlp_updated_at, "
            . "chrr.id AS chrr_id, chrr.name AS chrr_name, "
            . "chwr.id AS chwr_id, chwr.name AS chwr_name "
            . "FROM forum_category p "
            . "LEFT JOIN forum_topic plt ON p.last_topic_id = plt.id LEFT JOIN forum_post plp ON p.last_post_id = plp.id "
            . "LEFT JOIN forum_category ch ON p.id = ch.parent_id "
            . "LEFT JOIN forum_topic chlt ON ch.last_topic_id = chlt.id LEFT JOIN forum_post chlp ON ch.last_post_id = chlp.id "
            . "LEFT JOIN forum_category_read_roles fchrr ON ch.id = fchrr.category_id LEFT JOIN forum_role chrr ON chrr.id = fchrr.forum_role_id "
            . "LEFT JOIN forum_category_write_roles fchwr ON ch.id = fchwr.category_id LEFT JOIN forum_role chwr ON chwr.id = fchwr.forum_role_id "
            . "WHERE p.parent_id IS NULL";
    const SQL_ADMIN_PARENTSWITHCHILDS = "SELECT p.id AS p_id, p.parent_id AS p_parent_id, p.last_topic_id AS p_last_topic_id, p.last_post_id AS p_last_post_id, p.name AS p_name, "
            . "p.description AS p_description, p.slug AS p_slug, p.position AS p_position, p.num_topics AS p_num_topics, p.num_posts AS p_num_posts, "
            . "prr.id AS prr_id, prr.name AS prr_name, "
            . "pwr.id AS pwr_id, pwr.name AS pwr_name, "
            . "plt.id AS plt_id, plt.subject AS plt_subject, plt.slug AS plt_slug, plt.created_at AS plt_created_at, "
            . "plt.is_pinned AS plt_is_pinned, plt.is_buried AS plt_is_buried, "
            . "plp.id AS plp_id, plp.topic_id AS plp_topic_id, plp.author_id AS plp_author_id, plp.message AS plp_message, "
            . "plp.createdat AS plp_created_at, plp.updatedat AS plp_updated_at "
            /*
            . "ch.id AS ch_id, ch.parent_id AS ch_parent_id, ch.last_topic_id AS ch_last_topic_id, "
            . "ch.last_post_id AS ch_last_post_id, ch.name AS ch_name, ch.description AS ch_description, ch.slug AS ch_slug, "
            . "ch.position AS ch_position, ch.num_topics AS ch_num_topics, ch.num_posts AS ch_num_posts, "
            . "chlt.id AS chlt_id, chlt.subject AS chlt_subject, chlt.slug AS chlt_slug, chlt.created_at AS chlt_created_at, "
            . "chlt.is_pinned AS chlt_is_pinned, chlt.is_buried AS chlt_is_buried, "
            . "chlp.id AS chlp_id, chlp.topic_id AS chlp_topic_id, chlp.author_id AS chlp_author_id, chlp.message AS chlp_message, "
            . "chlp.createdat AS chlp_created_at, chlp.updatedat AS chlp_updated_at, "
            . "chrr.id AS chrr_id, chrr.name AS chrr_name, "
            . "chwr.id AS chwr_id, chwr.name AS chwr_name "
             * 
             */
            . "FROM forum_category p "
            . "LEFT JOIN forum_category_read_roles fprr ON p.id = fprr.category_id LEFT JOIN forum_role prr ON prr.id = fprr.forum_role_id "
            . "LEFT JOIN forum_category_write_roles fpwr ON p.id = fpwr.category_id LEFT JOIN forum_role pwr ON pwr.id = fpwr.forum_role_id "
            . "LEFT JOIN forum_topic plt ON p.last_topic_id = plt.id LEFT JOIN forum_post plp ON p.last_post_id = plp.id "
            /*
            . "LEFT JOIN forum_category ch ON p.id = ch.parent_id "
            . "LEFT JOIN forum_topic chlt ON ch.last_topic_id = chlt.id LEFT JOIN forum_post chlp ON ch.last_post_id = chlp.id "
            . "LEFT JOIN forum_category_read_roles fchrr ON ch.id = fchrr.category_id LEFT JOIN forum_role chrr ON chrr.id = fchrr.forum_role_id "
            . "LEFT JOIN forum_category_write_roles fchwr ON ch.id = fchwr.category_id LEFT JOIN forum_role chwr ON chwr.id = fchwr.forum_role_id "
             * 
             */
            . "WHERE p.parent_id IS NULL AND p.slug = ?";
    const SQL_INSERT = "INSERT INTO forum_category (id, parent_id, last_topic_id, last_post_id, name, description, slug, position, num_topics, num_posts) "
            . "VALUES (nextval('forum_category_id_seq'),?,?,?,?,?,?,?,?,?)";
    const SQL_UPDATE = "UPDATE forum_category SET parent_id = ?, last_topic_id = ?, last_post_id = ?, "
            . "name = ?, description = ?, slug = ?, position = ?, num_topics = ?, num_posts = ? "
            . "WHERE id = ?";
    

    public static function hydrateCategory($data = [], $key = "") {
        $category = new Category();

        $category->setId($data[$key . "_id"])
                ->setName($data[$key . "_name"])
                ->setSlug($data[$key . "_slug"])
                ->setDescription($data[$key . "_description"])
                ->setPosition($data[$key . "_position"])
                ->setNumTopics($data[$key . "_num_topics"])
                ->setNumPosts($data[$key . "_num_posts"]);

        return $category;
    }

    public function getIndex($roles) {

        $arrayRoles = [];
        foreach ($roles as $role) {
            $arrayRoles[] = $role->getId();
        }

        $stmt = $this->dbal->executeQuery(
                self::SQL_INDEX, [$arrayRoles, $arrayRoles], [
            \Doctrine\DBAL\Connection::PARAM_INT_ARRAY,
            \Doctrine\DBAL\Connection::PARAM_INT_ARRAY
        ]);

        $parentCat = [];

        $currentParent = null;
        while ($res = $stmt->fetch()) {
            if ($currentParent === null) {
                $currentParent = self::hydrateCategory($res, "c");
            }
            if ($currentParent->getId() !== $res["c_id"]) {
                $parentCat[] = $currentParent;
                $currentParent = self::hydrateCategory($res, "c");
            }

            if (!isset($res["ch_id"])) {
                continue;
            }
            $child = self::hydrateCategory($res, "ch");
            if (isset($res["lt_id"])) {
                $lastTopic = TopicRepository::hydrateTopic($res, "lt");
                $lastTopic->setAuthor(UserRepository::lightHydrateUser($res, "alt"));
                $child->setLastTopic($lastTopic);
            }
            if (isset($res["lp_id"]) && isset($res["lpt_id"])) {
                $lastPost = PostRepository::hydratePost($res, "lp");
                $lastPost->setAuthor(UserRepository::lightHydrateUser($res, "alp"));
                $lastPostTopic = TopicRepository::hydrateTopic($res, "lpt");
                $lastPost->setTopic($lastPostTopic);
                $child->setLastPost($lastPost);
            }

            $currentParent->addChild($child);
        }
        if ($currentParent !== null) {
            $parentCat[] = $currentParent;
        }
        $stmt->closeCursor();

        return $parentCat;
    }

    public function getParentsWithChilds() {
        $stmt = $this->dbal->query(self::SQL_PARENTSWITHCHILDS);

        $categories = [];
        $category = null;
        while ($res = $stmt->fetch()) {
            if ($category === null) {
                $category = self::hydrateCategory($res, "p");
                $category->setLastTopic(TopicRepository::hydrateTopic($res, "plt"));
                $category->setLastPost(PostRepository::hydratePost($res, "plp"));
            }
            if ($category->getId() !== $res["p_id"]) {
                $categories[] = $category;
                $category = self::hydrateCategory($res, "p");
                $category->setLastTopic(TopicRepository::hydrateTopic($res, "plt"));
                $category->setLastPost(PostRepository::hydratePost($res, "plp"));
            }

            if (isset($res["ch_id"])) {
                $child = self::hydrateCategory($res, "ch");
                $child->setLastTopic(TopicRepository::hydrateTopic($res, "chlt"));
                $child->setLastPost(PostRepository::hydratePost($res, "chlp"));

                $child->addReadRole(ForumRoleRepository::hydrateForumRole($res, "chrr"));
                $child->addWriteRole(ForumRoleRepository::hydrateForumRole($res, "chwr"));
                $category->addChild($child);
            }
        }
        if ($category !== null) {
            $categories[] = $category;
        }

        return $categories;
    }
    
    public function findParentBySlug(String $slug)
    {
        $stmt = $this->dbal->prepare(self::SQL_ADMIN_PARENTSWITHCHILDS);
        $stmt->bindValue(1, $slug, \PDO::PARAM_STR);
        $stmt->execute();
        
        $parent = null;
        $currentCategory = null;
        while ($res = $stmt->fetch()) {
            if ($parent === null) {
                $parent = self::hydrateCategory($res, "p");
                $parent->setLastTopic(TopicRepository::hydrateTopic($res, "plt"));
                $parent->setLastPost(PostRepository::hydratePost($res, "plp"));
            }
            $parent->addReadRole(ForumRoleRepository::hydrateForumRole($res, "prr"));
            $parent->addWriteRole(ForumRoleRepository::hydrateForumRole($res, "pwr"));
            
            /*
            if ($parent->getId() !== $res["p_id"]) {
                $categories[] = $category;
                $category = self::hydrateCategory($res, "p");
                $category->setLastTopic(TopicRepository::hydrateTopic($res, "plt"));
                $category->setLastPost(PostRepository::hydratePost($res, "plp"));
            }

            if (isset($res["ch_id"])) {
                $child = self::hydrateCategory($res, "ch");
                $child->setLastTopic(TopicRepository::hydrateTopic($res, "chlt"));
                $child->setLastPost(PostRepository::hydratePost($res, "chlp"));

                $child->addReadRole(ForumRoleRepository::hydrateForumRole($res, "chrr"));
                $child->addWriteRole(ForumRoleRepository::hydrateForumRole($res, "chwr"));
                $category->addChild($child);
            }
             * 
             */
        }

        //$categories[] = $parent;

        return $parent;
        
    }

    public function getParentCategoryBySlug($slug, $readRoles = null) {
        
        $args = [
            $slug
        ];
        
        $params = [
            \PDO::PARAM_STR
        ];
        
        $sqlsprintf = "";
        
        if ($readRoles !== null) {
            $sqlsprintf = " AND (fr.id IN (?) OR chfr.id IN (?)) ";
            $arrayRoles = [];
            foreach ($readRoles as $role) {
                $arrayRoles[] = $role->getId();
            }
            $args[] = $arrayRoles;
            $args[] = $arrayRoles;
            $params[] = \Doctrine\DBAL\Connection::PARAM_INT_ARRAY;
            $params[] = \Doctrine\DBAL\Connection::PARAM_INT_ARRAY;
        }
        
        $sql = sprintf(self::SQL_PARENTBYSLUG, $sqlsprintf);
        $stmt = $this->dbal->executeQuery($sql, $args, $params);

        $category = null;
        while ($res = $stmt->fetch()) {
            if ($category === null) {
                $category = self::hydrateCategory($res, "c");
            }
            $child = self::hydrateCategory($res, "ch");

            if (isset($res["lt_id"])) {
                $lastTopic = TopicRepository::hydrateTopic($res, "lt");
                $lastTopic->setAuthor(UserRepository::lightHydrateUser($res, "alt"));
                $child->setLastTopic($lastTopic);
            }
            if (isset($res["lp_id"]) && isset($res["lpt_id"])) {
                $lastPost = PostRepository::hydratePost($res, "lp");
                $lastPost->setAuthor(UserRepository::lightHydrateUser($res, "alp"));
                $lastPostTopic = TopicRepository::hydrateTopic($res, "lpt");
                $lastPost->setTopic($lastPostTopic);
                $child->setLastPost($lastPost);
            }

            $category->addChild($child);
        }
        $stmt->closeCursor();

        return $category;
    }

    public function getCategory($slug, $parentSlug, $getTopics = false, $page = 1, $maxResults = 10) {
        $stmt = $this->dbal->prepare(self::SQL_CATEGORYBYSLUG);
        $stmt->bindValue(1, $slug, \PDO::PARAM_STR);
        $stmt->bindValue(2, $parentSlug, \PDO::PARAM_STR);
        $stmt->execute();

        $category = null;
        $parent = null;
        while ($res = $stmt->fetch()) {
            if ($category === null) {
                $category = self::hydrateCategory($res, "c");
                $category->setLastTopic(TopicRepository::hydrateTopic($res, "clt"));
                $category->setLastPost(PostRepository::hydratePost($res, "clp"));

                $parent = self::hydrateCategory($res, "p");
                $parent->setLastTopic(TopicRepository::hydrateTopic($res, "plt"));
                $parent->setLastPost(PostRepository::hydratePost($res, "plp"));
            }

            if (isset($res["crr_id"])) {
                $category->addReadRole(ForumRoleRepository::hydrateForumRole($res, "crr"));
            }
            if (isset($res["cwr_id"])) {
                $category->addWriteRole(ForumRoleRepository::hydrateForumRole($res, "cwr"));
            }
            // parent roles
            if (isset($res["prr_id"])) {
                $parent->addReadRole(ForumRoleRepository::hydrateForumRole($res, "prr"));
            }
            if (isset($res["pwr_id"])) {
                $parent->addWriteRole(ForumRoleRepository::hydrateForumRole($res, "pwr"));
            }
        }
        $stmt->closeCursor();
        if ($getTopics) {
            $topicRepo = new TopicRepository($this->dbal);
            $topics = $topicRepo->getTopicsByCat($category, $page, $maxResults);
            foreach ($topics as $topic) {
                $category->addTopic($topic);
            }
        }
        
        if ($category !== null) {
            $category->setParent($parent);
        }
        return $category;
    }

    public function getCategoryForInsertTopic($slug, $parentSlug) {

        $stmt = $this->dbal->prepare(self::SQL_CATEGORYBYSLUG);
        $stmt->bindValue(1, $slug, \PDO::PARAM_STR);
        $stmt->bindValue(2, $parentSlug, \PDO::PARAM_STR);
        $stmt->execute();

        $category = null;
        $child = null;
        while ($res = $stmt->fetch()) {
            if ($category === null) {
                $category = self::hydrateCategory($res, "p");
                $category->setLastTopic(TopicRepository::hydrateTopic($res, "plt"));
                $category->setLastPost(PostRepository::hydratePost($res, "plp"));
            }
            if ($child === null) {
                $child = self::hydrateCategory($res, "c");
                $child->setLastTopic(TopicRepository::hydrateTopic($res, "clt"));
                $child->setLastPost(PostRepository::hydratePost($res, "clp"));
            }

            $child->addReadRole(ForumRoleRepository::hydrateForumRole($res, "crr"));
            $child->addWriteRole(ForumRoleRepository::hydrateForumRole($res, "cwr"));
        }

        $category->addChild($child);

        return $category;
    }

    public function persist(Category $category) {
        if ($category->getId() === null) {
            return $this->insert($category);
        }
        return $this->update($category);
    }

    private function insert(Category $category) {
        $stmt = $this->dbal->prepare(self::SQL_INSERT);

        $parentId = null;
        if ($category->getParent()) {
            $parentId = $category->getParent()->getId();
        }
        $stmt->bindValue(1, $parentId, \PDO::PARAM_INT);

        $lastTopicId = null;
        if ($category->getLastTopic()) {
            $lastTopicId = $category->getLastTopic()->getId();
        }
        $stmt->bindValue(2, $lastTopicId, \PDO::PARAM_INT);

        $lastPostId = null;
        if ($category->getLastPost()) {
            $lastPostId = $category->getLastPost()->getId();
        }
        $stmt->bindValue(3, $lastPostId, \PDO::PARAM_INT);

        $stmt->bindValue(4, $category->getName(), \PDO::PARAM_STR);
        $stmt->bindValue(5, $category->getDescription(), \PDO::PARAM_INT);
        $stmt->bindValue(6, $category->getSlug(), \PDO::PARAM_STR);
        $stmt->bindValue(7, $category->getPosition(), \PDO::PARAM_INT);
        $stmt->bindValue(8, $category->getNumTopics(), \PDO::PARAM_INT);
        $stmt->bindValue(9, $category->getNumPosts(), \PDO::PARAM_INT);

        $stmt->execute();
        $stmt->closeCursor();
        $category->setId($this->dbal->lastInsertId("forum_category_id_seq"));

        //return $category;
    }

    private function update(Category $category) {
        $stmt = $this->dbal->prepare(self::SQL_UPDATE);

        $parentId = null;
        if ($category->getParent()) {
            $parentId = $category->getParent()->getId();
        }
        $stmt->bindValue(1, $parentId, \PDO::PARAM_INT);

        $lastTopicId = null;
        if ($category->getLastTopic()) {
            $lastTopicId = $category->getLastTopic()->getId();
        }
        $stmt->bindValue(2, $lastTopicId, \PDO::PARAM_INT);

        $lastPostId = null;
        if ($category->getLastPost()) {
            $lastPostId = $category->getLastPost()->getId();
        }
        $stmt->bindValue(3, $lastPostId, \PDO::PARAM_INT);

        $stmt->bindValue(4, $category->getName(), \PDO::PARAM_STR);
        $stmt->bindValue(5, $category->getDescription(), \PDO::PARAM_INT);
        $stmt->bindValue(6, $category->getSlug(), \PDO::PARAM_STR);
        $stmt->bindValue(7, $category->getPosition(), \PDO::PARAM_INT);
        $stmt->bindValue(8, $category->getNumTopics(), \PDO::PARAM_INT);
        $stmt->bindValue(9, $category->getNumPosts(), \PDO::PARAM_INT);
        $stmt->bindValue(10, $category->getId(), \PDO::PARAM_INT);

        $stmt->execute();
        $stmt->closeCursor();

        return $category;
    }
    
    public function create_database() {
        // will be moved
        $shemaCreate = new \Incolab\ForumBundle\Resources\SchemaDatabase\CreateShema($this->dbal);
        return $shemaCreate->create_database();
    }

}
