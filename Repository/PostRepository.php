<?php

namespace Incolab\ForumBundle\Repository;

use UserBundle\Entity\User;
use Incolab\ForumBundle\Entity\Topic;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends \Doctrine\ORM\EntityRepository
{
    public static $strPostForEditQuery = "SELECT p, "
            . "partial t.{id, slug}, partial c.{id, slug}, partial q.{id, slug} "
            . "FROM IncolabForumBundle:Post p "
            . "LEFT JOIN p.topic t LEFT JOIN t.category c LEFT JOIN c.parent q "
            . "WHERE p.id = :id AND p.author = :author AND t.slug = :slugTopic "
            . "AND c.slug = :slugCat AND q.slug = :slugParentCat";
    
    public static $strGetNbPostByTopic = "SELECT COUNT(p.id) "
            . "FROM IncolabForumBundle:Post p "
            . "WHERE p.topic = :topic";
    
    public static $strGetNbPostsUntilId = "SELECT COUNT(p.id) "
            . "FROM IncolabForumBundle:Post p "
            . "WHERE p.topic = :topic AND p.id < :postid";
    public static $strGetNbPostsUntilIdByTopicSlug = "SELECT COUNT(p.id) "
            . "FROM IncolabForumBundle:Post p "
            . "LEFT JOIN p.topic t "
            . "WHERE t.slug = :topicSlug AND p.id < :postid";




    public function getPostForEdit($slugParentCat, $slugCat, $slugTopic, $postId, User $author)
    {
        $parameters = array(
            ':id' => $postId,
            ':author' => $author,
            ':slugTopic' => $slugTopic,
            ':slugCat' => $slugCat,
            ':slugParentCat' => $slugParentCat
        );
        
        $query = $this->_em->createQuery(self::$strPostForEditQuery)
                ->setParameters($parameters);
        return $query->getOneOrNullResult();
    }
    
    public function getNbPostsByTopic(Topic $topic) {
        $query = $this->_em->createQuery(self::$strGetNbPostByTopic)
                ->setParameter(":topic", $topic);
        return $query->getSingleScalarResult();
    }
    
    public function getNbPostsUntilId(Topic $topic, $postid) {
        $params = [":topic" => $topic, ":postid" => $postid];
        $query = $this->_em->createQuery(self::$strGetNbPostsUntilId)
                ->setParameters($params);
        return $query->getSingleScalarResult();
    }
    
    public function getNbPostsUntilIdByTopicSlug($topicSlug, $postid) {
        $params = [":topicSlug" => $topicSlug, ":postid" => $postid];
        $query = $this->_em->createQuery(self::$strGetNbPostsUntilIdByTopicSlug)
                ->setParameters($params);
        return $query->getSingleScalarResult() + 1;
    }
}
